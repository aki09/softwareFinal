<html xmlns="http://www.w3.org/1999/xhtml">

<head>
    <meta charset="utf-8">
    <title>Drone Co-ordinates</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <link rel="stylesheet" href="css/form.css" />
    <link rel="shortcut icon" href="images/fav-promo.png" />
</head>

<body>
    <!-- <div id="dvMap" style="width: 100%; height: 100%">
    </div> -->


    <div class="page-content">
        <div class="form-v4-content">
            <div class="form-detail">
                <div id="dvMap" style="width: 100%; height: 100%">
                    <input type="button" value="Delete" onclick="DeleteMarker()" />
                </div>
            </div>
            <!-- <div class="form-left">

                <h2>INFORMATION</h2>
                <p class="text-1">Please enter the co-ordinates of location where you want the drone to operate. </p>
                <p class="text-2"><span>Use: </span> Enter four co-ordinate pairs enclosing the solar field.</p>
                <div class="form-left-last">
                    <input type="submit" name="dashboard" class="dashboard" value="Go to Dashboard"
                        onclick="location.href='/';">
                </div>

            </div> -->
            <form class="form-detail" action="/form" method="POST" id="myform">
                <p id="demo"></p>
                <h2>CO-ORDINATES</h2>
                <div class="form-group">
                    <div class="hello">
                        <label for="first_name">POINT - 1</label>
                    </div>
                    <div class="form-row form-row-1">
                        <label for="first_name">Latitude</label>
                        <input type="text" name="lat_1" id="lat_1" class="input-text" value=<%=gridCoords[0].lat %> readonly>
                    </div>
                    <div class="form-row form-row-1">
                        <label for="last_name">Longitude</label>
                        <input type="text" name="lon_1" id="lon_1" class="input-text" value=<%=gridCoords[0].lng %> readonly>
                    </div>
                </div>
                <div class="form-group">
                    <div class="hello">
                        <label for="first_name">POINT - 2</label>
                    </div>
                    <div class="form-row form-row-1">
                        <label for="first_name">Latitude</label>
                        <input type="text" name="lat_2" id="lat_2" class="input-text" value=<%=gridCoords[1].lat %> readonly>
                    </div>
                    <div class="form-row form-row-1">
                        <label for="last_name">Longitude</label>
                        <input type="text" name="lon_2" id="lon_2" class="input-text" value=<%=gridCoords[1].lng %> readonly>
                    </div>
                </div>
                <div class="form-group">
                    <div class="hello">
                        <label for="first_name">POINT - 3</label>
                    </div>
                    <div class="form-row form-row-1">
                        <label for="first_name">Latitude</label>
                        <input type="text" name="lat_3" id="lat_3" class="input-text" value=<%=gridCoords[2].lat %> readonly>
                    </div>
                    <div class="form-row form-row-1">
                        <label for="last_name">Longitude</label>
                        <input type="text" name="lon_3" id="lon_3" class="input-text" value=<%=gridCoords[2].lng %> readonly>
                    </div>
                </div>
                <div class="form-group">
                    <div class="hello">
                        <label for="first_name">POINT - 4</label>
                    </div>
                    <div class="form-row form-row-1">
                        <label for="first_name">Latitude</label>
                        <input type="text" name="lat_4" id="lat_4" class="input-text" value=<%=gridCoords[3].lat %> readonly>
                    </div>
                    <div class="form-row form-row-1">
                        <label for="last_name">Longitude</label>
                        <input type="text" name="lon_4" id="lon_4" class="input-text" value=<%=gridCoords[3].lng %> readonly>
                    </div>
                </div>
                <div class="form-group">
                    <div class="hello">
                        <label for="first_name">POINT DISTANCES</label>
                    </div>
                    <div class="form-row form-row-1">
                        <label for="first_name">Latitude</label>
                        <input type="number" step=0.000001 name="lat_ch" id="lat_ch" class="input-text" value=<%=lat_ch %>>
                    </div>
                    <div class="form-row form-row-1">
                        <label for="last_name">Longitude</label>
                        <input type="number" step=0.00001 name="lon_ch" id="lon_ch" class="input-text" value=<%=lon_ch %>>
                    </div>
                </div>
                <div class="form-row-last">
                    <input type="submit" name="register" class="register" value="Proceed">
                    <input type="submit" name="grid" class="register" value="Grid" formaction="/grid">

                </div>
                <input type="hidden" name="drone_id" id="drone_id" value="<%= drone_id %>">
            </form>
        </div>
    </div>
</body>
<script>
    var lati=parseFloat("<%=latimax %>");
    var longi=parseFloat("<%= longimax %>");
    var latich=parseFloat("<%=lat_ch %>");
    var longich=parseFloat("<%= lon_ch %>");
    var markers = [];
    var uniqueId = 1;
    var loc = [];
    function addPoint(latLng) {
        loc.push({ lat: latLng.lat(), lng: latLng.lng() });
        console.log(loc);
        return
    }
    function initMap() {
        var mapOptions = {
            center: { lat: lati, lng:longi },
            zoom: 20,
            mapTypeId: 'satellite'
        };
        var map = new google.maps.Map(document.getElementById("dvMap"), mapOptions);
        var gridCoords = [
            { lat:parseFloat( "<%=gridCoords[0].lat %> "), lng:parseFloat( "<%=gridCoords[0].lng %>"),angle:0.0 },
            { lat: parseFloat("<%=gridCoords[1].lat %>"), lng: parseFloat("<%=gridCoords[1].lng %>"),angle:0.0  },
            { lat:parseFloat("<%=gridCoords[2].lat %>") , lng: parseFloat("<%=gridCoords[2].lng %>" ),angle:0.0 },
            { lat: parseFloat("<%=gridCoords[3].lat %>"), lng: parseFloat("<%=gridCoords[3].lng %>"),angle:0.0  }
        ];
        let x_sum = 0;
        let y_sum = 0;
        for (let i = 0; i < gridCoords.length; i++) {
            x_sum += gridCoords[0].lat;
            y_sum += gridCoords[0].lng;
        }
        let centroid = {
            x: x_sum / 4,
            y: y_sum / 4
        };
        for (let i = 0; i < gridCoords.length; i++) {
            gridCoords[i].angle = Math.atan2(gridCoords[i].lng - centroid.y, gridCoords[i].lat - centroid.x);
        }
        gridCoords.sort(function (a, b) {
            return a.angle - b.angle;
        });        
        let latimin=gridCoords[0].lat
        let longimin=gridCoords[0].lng
        for(let i=1;i<4;i++)
        {
            latimin=Math.min(latimin,gridCoords[i].lat)
            longimin=Math.min(longimin,gridCoords[i].lng)
        }
        let latimax=gridCoords[0].lat
        let longimax=gridCoords[0].lng
        for(let i=1;i<4;i++)
        {
            latimax=Math.max(latimax,gridCoords[i].lat)
            longimax=Math.max(longimax,gridCoords[i].lng)
        }
        var pathCoords=[]
        class Point {
            //int x, y;
            constructor(x,y)
            {
                this.x=x;
                this.y=y;
            }
        }
        
        class line {
            //Point p1, p2;
            constructor(p1,p2)
            {
                this.p1=p1;
                this.p2=p2;
            }
        
        };
        function onLine(l1, p)
        {
            // Check whether p is on the line or not
            if (p.x <= Math.max(l1.p1.x, l1.p2.x)
                && p.x <= Math.min(l1.p1.x, l1.p2.x)
                && (p.y <= Math.max(l1.p1.y, l1.p2.y)
                    && p.y <= Math.min(l1.p1.y, l1.p2.y)))
                return true;
        
            return false;
        }
        
        function direction(a, b, c)
        {
            let val = (b.y - a.y) * (c.x - b.x)
                    - (b.x - a.x) * (c.y - b.y);
        
            if (val == 0)
        
                // Colinear
                return 0;
        
            else if (val < 0)
        
                // Anti-clockwise direction
                return 2;
        
            // Clockwise direction
            return 1;
        }
        
        function isIntersect(l1, l2)
        {
            // Four direction for two lines and points of other line
            let dir1 = direction(l1.p1, l1.p2, l2.p1);
            let dir2 = direction(l1.p1, l1.p2, l2.p2);
            let dir3 = direction(l2.p1, l2.p2, l1.p1);
            let dir4 = direction(l2.p1, l2.p2, l1.p2);
        
            // When intersecting
            if (dir1 != dir2 && dir3 != dir4)
                return true;
        
            // When p2 of line2 are on the line1
            if (dir1 == 0 && onLine(l1, l2.p1))
                return true;
        
            // When p1 of line2 are on the line1
            if (dir2 == 0 && onLine(l1, l2.p2))
                return true;
        
            // When p2 of line1 are on the line2
            if (dir3 == 0 && onLine(l2, l1.p1))
                return true;
        
            // When p1 of line1 are on the line2
            if (dir4 == 0 && onLine(l2, l1.p2))
                return true;
        
            return false;
        }
                
        function checkInside(poly, n, p)
        {
        
            // When polygon has less than 3 edge, it is not polygon
            if (n < 3)
                return false;
        
            // Create a point at infinity, y is same as point p
            let tmp=new Point(9999, p.y);
            let exline = new line( p, tmp );
            let count = 0;
            let i = 0;
            do {
        
                // Forming a line from two consecutive points of
                // poly
                let side = new line( poly[i], poly[(i + 1) % n] );
                if (isIntersect(side, exline)) {
        
                    // If side is intersects exline
                    if (direction(side.p1, p, side.p2) == 0)
                        return onLine(side, p);
                    count++;
                }
                i = (i + 1) % n;
            } while (i != 0);
        
            // When count is odd
            return count & 1;
        }
        let indCycle=0
        let fixedstep=0.0000001

        let polygon= [ new Point(gridCoords[0].lat, gridCoords[0].lng), new Point(gridCoords[1].lat, gridCoords[1].lng), new Point(gridCoords[2].lat, gridCoords[2].lng),  new Point(gridCoords[3].lat, gridCoords[3].lng) ];   
        for(let a=latimax-fixedstep;a>=latimin;a=a-latich)
        {
            if(indCycle%2==0){
                for(let b=longimin+fixedstep;b<=longimax;b=b+longich)
                {
                    let p = new Point( a, b );
                    if (checkInside(polygon, 4, p))
                    {
                        pathCoords.push({lat:a,lng:b})
                    }
                }
            }else{
                for(let b=longimax-fixedstep;b>=longimin;b=b-longich)
                {
                    let p = new Point( a, b );
                    if(checkInside(polygon, 4, p))
                    {
                        pathCoords.push({lat:a,lng:b})
                    }
                }
            }
            indCycle++;
        }
    
        var gridPolygon = new google.maps.Polygon({
            paths: gridCoords,
            strokeColor: '#FF0000',
            strokeOpacity: 0.8,
            strokeWeight: 1,
            fillColor: '#FF0000',
            fillOpacity: 0.35
        });
        var pathPolyline = new google.maps.Polyline({
            path: pathCoords,
            geodesic: true,
            strokeColor: '#0000FF',
            strokeOpacity: 1.0,
            strokeWeight: 2
        });
        gridPolygon.setMap(map);
        pathPolyline.setMap(map);
        google.maps.event.addListener(map, 'click', function (e) {
            addPoint(e.latLng);
            //Determine the location where the user has clicked.
            var location = e.latLng;
            // console.log(location);
            // loc.push({ lat: e.latLng.lat(), lng: e.latLng.lng() })
            //Create a marker and placed it on the map.
            var marker = new google.maps.Marker({
                position: location,
                map: map
            });
            marker.id = uniqueId;
            uniqueId++;
            //Attach click event handler to the marker.
            google.maps.event.addListener(marker, "click", function (e) {
                // addPoint(e.latLng);
                // var location = e.latLng;
                // var marker = new google.maps.Marker({
                //     position: location,
                //     map: map
                // });
                var content = 'Latitude: ' + location.lat() + '<br />Longitude: ' + location.lng();
                content += "<br /><input type = 'button' value = 'Delete' onclick = 'DeleteMarker(" + marker.id + ");' value = 'Delete' />";
                var infoWindow = new google.maps.InfoWindow({
                    content: content
                });
                // document.getElementById('lat_1').value = loc[0].lat;
                // document.getElementById('lon_1').value = loc[0].lng;
                // document.getElementById('lat_2').value = loc[1].lat;
                // document.getElementById('lon_2').value = loc[1].lng;
                // document.getElementById('lat_3').value = loc[2].lat;
                // document.getElementById('lon_3').value = loc[2].lng;
                // document.getElementById('lat_4').value = loc[3].lat;
                // document.getElementById('lon_4').value = loc[3].lng;
                infoWindow.open(map, marker);
            });
            markers.push(marker);
            console.log(markers);
            document.getElementById('lat_1').value = loc[0].lat;
            document.getElementById('lon_1').value = loc[0].lng;
            document.getElementById('lat_2').value = loc[1].lat;
            document.getElementById('lon_2').value = loc[1].lng;
            document.getElementById('lat_3').value = loc[2].lat;
            document.getElementById('lon_3').value = loc[2].lng;
            document.getElementById('lat_4').value = loc[3].lat;
            document.getElementById('lon_4').value = loc[3].lng;
            infoWindow.open(map, marker);
        });
       
    }
    function DeleteMarker(id) {
        //Find and remove the marker from the Array
        for (var i = 0; i < markers.length; i++) {
            if (markers[i].id == id) {
                //Remove the marker from Map                  
                markers[i].setMap(null);
                loc.splice(i, 1);
                //Remove the marker from array.
                markers.splice(i, 1);
                return;
            }
        }
    };

</script>
<script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCh7msMVHVzGIGudLom3v5p1U4vLWxaH50&callback=initMap"></script>
</html>